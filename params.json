{"name":"Accelerator","tagline":"A React view engine for Express which supports client-side mounting.","body":"# Accelerator\r\n[![npm version](https://badge.fury.io/js/accelerator.svg)](http://badge.fury.io/js/accelerator)\r\n[![Build Status](https://travis-ci.org/AndrewGuenther/Accelerator.svg)](https://travis-ci.org/AndrewGuenther/Accelerator)\r\n[![Coverage Status](https://coveralls.io/repos/AndrewGuenther/Accelerator/badge.svg?branch=master&service=github)](https://coveralls.io/github/AndrewGuenther/Accelerator?branch=master)\r\n\r\nA [React][react] view engine for [Express][express] which supports client-side\r\nmounting.\r\n\r\n## Installing\r\n\r\n```\r\nnpm install accelerator\r\n```\r\n\r\n## Adding Accelerator to your app\r\nIn your main app file, add the following:\r\n\r\n```javascript\r\n// app.js\r\n\r\nvar app = express();\r\n\r\napp.set('views', __dirname + '/views');\r\napp.set('view engine', 'jsx');\r\napp.engine('jsx', require('accelerator').createEngine());\r\n```\r\n\r\n## Rendering a view\r\nHere is a simple example of a route returning an Accelerator view\r\n\r\n```javascript\r\n// app.js\r\n\r\napp.get('/', function(req, res) {\r\n   res.render('homepage', {props: {name: 'Andrew'}});\r\n});\r\n```\r\n\r\nWhen we render a view using Accelerator, the actual properties which will be\r\npassed to our React element are stored in the `props` key of our options\r\nobject.\r\n\r\nHere's what `homepage.jsx` looks like.\r\n\r\n```javascript\r\n// views/homepage.jsx\r\n\r\nvar React = require('react')\r\n\r\nmodule.exports = React.createClass({\r\n   render: function() {\r\n      return (\r\n         <div>\r\n            <h1>Hello {this.props.name}</h1>\r\n         </div>\r\n      );\r\n   }\r\n});\r\n```\r\n\r\nHere's what the resulting HTML will look like:\r\n\r\n```html\r\n<html>\r\n   <body>\r\n      <div id=\"content\">\r\n         <div data-reactid=\".hi3kxtgbnk\" data-react-checksum=\"-480494251\">\r\n            <h1 data-reactid=\".hi3kxtgbnk.0\">What the Code</h1>\r\n         </div>\r\n      </div>\r\n      <script>var APP_PROPS = {\"name\": \"Andrew\"};</script>\r\n   </body>\r\n</html>\r\n```\r\n\r\nSo what did Accelerator do? When you pass a view to the `render()` function\r\nAccelerator will require that file and render whatever React class is exported\r\nto non-static markup. This means that the `react-id` and `data-react-checksum`\r\nfields will be preserved (they're necessary for mounting on the client later).\r\nThe resulting element will then be mounted on a `<div>` with the `id`\r\n\"content.\" You will also notice that your `props` are nicely added there at the\r\nbottom so that you can more easily mount cleanly on the client. Here's what\r\nyour client mounting will look like:\r\n\r\n```javascript\r\n// client.js\r\n\r\nReact.render(React.createElement(Homepage, APP_PROPS), document.getElementById(\"content\"))\r\n```\r\n\r\n**Note:** This assumes that you've used [Browserify][browserify] to package up\r\nyour export from `homepage.jsx` above. The details of how to do this aren't\r\ncovered here. See the Browserify documentation.\r\n\r\n**Another note:** The clever observer may notice that our example page has no\r\n`<head>` element and also doesn't include `client.js` anywhere. I know it is\r\nwrong, but don't worry, we'll get to that in a minute.\r\n\r\nWhy mount to \"content\" and not directly to the `<body>`? There's a few reasons.\r\n\r\n1. React doesn't like mounting directly to the body, you'll see it\r\ncomplain if you try.\r\n1. Also, notice that nifty little `<script>` element with\r\nyour initial props in it at the bottom there? That can't be there if you mount\r\ndirectly to the `<body>`, otherwise the checksum would fail when you try to\r\nmount.\r\n1. Lastly, this allows us to inject other static markup at the bottom of\r\nthe `<body>` without failing the checksum.\r\n\r\n## The `head` and `post` properties\r\nYou'll notice that our above example is lacking a `<head>` element. Don't\r\nworry, Accelerator will handle that. Let's expand a bit on our example.\r\n\r\n```javascript\r\n// app.js\r\n\r\napp.get('/', function(req, res) {\r\n   res.render('homepage', {\r\n      props: {name: 'Andrew'},\r\n      head: require('./views/head.jsx'),\r\n      head_props: {title: 'My Homepage'},\r\n      post: require('./views/post.jsx'),\r\n      post_props: {src: '/js/client.js'} \r\n   });\r\n});\r\n```\r\n\r\nWell that is certainly different. Let's take a look at these bad boys.\r\n\r\n```javascript\r\n// head.jsx\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n   render: function() {\r\n      return (\r\n         <head>\r\n            <title>{this.props.title}</title>\r\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/base.css\" />\r\n         </head>\r\n   )}\r\n});\r\n```\r\n\r\n```javascript\r\n// post.jsx\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n   render: function() {\r\n      return (\r\n         <div>\r\n            <script src=\"http://fb.me/react-0.13.3.js\"></script>\r\n            <script src={this.props.src}></script>\r\n         </div>\r\n   )}\r\n});\r\n```\r\n\r\nAccelerator renders both the `head` and `post` parameters to **static** markup\r\nand inserts them above and below your the `<div id=\"content\">` element,\r\nrespectively. As you have likely guessed, `head_props` and `post_props` get\r\npassed as props when the elements are rendered.\r\n\r\nSo *now* what does our HTML look like?\r\n\r\n```html\r\n<html>\r\n   <head>\r\n      <title>My Homepage</title>\r\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/base.css\" />\r\n   </head>\r\n   <body>\r\n      <div id=\"content\">\r\n         <div data-reactid=\".hi3kxtgbnk\" data-react-checksum=\"-480494251\">\r\n            <h1 data-reactid=\".hi3kxtgbnk.0\">What the Code</h1>\r\n         </div>\r\n      </div>\r\n      <script>var APP_PROPS = {\"name\": \"Andrew\"};</script>\r\n      <div>\r\n         <script src=\"http://fb.me/react-0.13.3.js\"></script>\r\n         <script src=\"/js/client.js\"></script>\r\n      </div>\r\n   </body>\r\n</html>\r\n```\r\n\r\nAnd there you have it.\r\n\r\n## TL;DR\r\n\r\nRender a view like this:\r\n\r\n```javascript\r\napp.get('/', function(req, res) {\r\n   res.render('homepage', {\r\n      props: {name: 'Andrew'},\r\n      head: require('./views/head.jsx'),\r\n      head_props: {title: 'My Homepage'},\r\n      post: require('./views/post.jsx'),\r\n      post_props: {src: '/js/client.js'}\r\n   });\r\n});\r\n```\r\n\r\nAnd Accelerator will use it to generate a page based on this:\r\n\r\n```html\r\n<html>\r\n   <head_elem />\r\n   <body>\r\n      <div id=\"content\">\r\n         <view_elem />\r\n      </div>\r\n      <script>var APP_PROPS=view_props;</script>\r\n      <post_elem />\r\n   </body>\r\n</html>\r\n```\r\n\r\nGet it? Got it? Good. Don't get it? Feel free to submit an issue!\r\n\r\n## Why not [express-react-views][express-react-views]?\r\nThe maintainers of the express-react-views project have explicitly stated that\r\nthey have no intent to supoort client-side mounting and reject any\r\ncontributions which try to add this functionality.\r\n\r\n[react]: http://facebook.github.io/react/\r\n[express]: http://expressjs.com/\r\n[express-react-views]: https://github.com/reactjs/express-react-views\r\n[browserify]: http://browserify.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}